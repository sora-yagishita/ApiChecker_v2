{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ygst_\\\\myFile\\\\ApiChecker\\\\src\\\\StatusDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StatusDisplay() {\n  _s();\n  const [apiInfo, setApiInfo] = useState([]);\n  const [statusCodes, setStatusCodes] = useState({});\n  const [lastApiRequestTime, setLastApiRequestTime] = useState(null);\n  useEffect(() => {\n    // エンドポイント情報を読み込む\n    const endpointData = require('./endpoints.json');\n    const apiInfo = endpointData.apiInfo;\n    setApiInfo(apiInfo);\n\n    // API情報ごとにリクエストを送信\n    apiInfo.forEach(api => {\n      fetchStatusCode(api);\n    });\n\n    // 1時間ごとにすべてのAPIに対してリクエストを再送信\n    const intervalId = setInterval(() => {\n      apiInfo.forEach(api => {\n        fetchStatusCode(api);\n      });\n    }, 3600000);\n\n    // コンポーネントがアンマウントされたときにクリア\n    return () => clearInterval(intervalId);\n  }, []);\n  const fetchStatusCode = async api => {\n    try {\n      // APIエンドポイントにGETリクエストを送信\n      const response = await fetch(api.apiEndpoint, {\n        method: 'GET'\n      });\n\n      // ステータスコードを取得\n      const status = response.status;\n\n      // ステータスコードを更新\n      setStatusCodes(prevStatusCodes => ({\n        ...prevStatusCodes,\n        [api.apiName]: status\n      }));\n\n      // 最後のAPI送信時間を更新\n      setLastApiRequestTime(new Date());\n    } catch (error) {\n      console.error(`${api.apiName} API呼び出し中にエラーが発生しました`, error);\n      // エラーの場合もステータスコードを更新\n      setStatusCodes(prevStatusCodes => ({\n        ...prevStatusCodes,\n        [api.apiName]: 'Error'\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u6700\\u7D42\\u66F4\\u65B0\\u6642\\u9593: \", lastApiRequestTime ? lastApiRequestTime.toLocaleTimeString() : 'まだ送信されていません']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), apiInfo.map(api => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"API\\u540D: \", api.apiName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u30B9\\u30C6\\u30FC\\u30BF\\u30B9\\u30B3\\u30FC\\u30C9: \", statusCodes[api.apiName]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, api.apiName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(StatusDisplay, \"UfPgn0ypdLfdm0kLmZOHikQBmrE=\");\n_c = StatusDisplay;\nexport default StatusDisplay;\nvar _c;\n$RefreshReg$(_c, \"StatusDisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","StatusDisplay","_s","apiInfo","setApiInfo","statusCodes","setStatusCodes","lastApiRequestTime","setLastApiRequestTime","endpointData","require","forEach","api","fetchStatusCode","intervalId","setInterval","clearInterval","response","fetch","apiEndpoint","method","status","prevStatusCodes","apiName","Date","error","console","children","toLocaleTimeString","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/ygst_/myFile/ApiChecker/src/StatusDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction StatusDisplay() {\r\n  const [apiInfo, setApiInfo] = useState([]);\r\n  const [statusCodes, setStatusCodes] = useState({});\r\n  const [lastApiRequestTime, setLastApiRequestTime] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // エンドポイント情報を読み込む\r\n    const endpointData = require('./endpoints.json');\r\n    const apiInfo = endpointData.apiInfo;\r\n\r\n    setApiInfo(apiInfo);\r\n\r\n    // API情報ごとにリクエストを送信\r\n    apiInfo.forEach((api) => {\r\n      fetchStatusCode(api);\r\n    });\r\n\r\n    // 1時間ごとにすべてのAPIに対してリクエストを再送信\r\n    const intervalId = setInterval(() => {\r\n      apiInfo.forEach((api) => {\r\n        fetchStatusCode(api);\r\n      });\r\n    }, 3600000);\r\n\r\n    // コンポーネントがアンマウントされたときにクリア\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const fetchStatusCode = async (api) => {\r\n    try {\r\n      // APIエンドポイントにGETリクエストを送信\r\n      const response = await fetch(api.apiEndpoint, {\r\n        method: 'GET',\r\n      });\r\n\r\n      // ステータスコードを取得\r\n      const status = response.status;\r\n\r\n      // ステータスコードを更新\r\n      setStatusCodes((prevStatusCodes) => ({\r\n        ...prevStatusCodes,\r\n        [api.apiName]: status,\r\n      }));\r\n\r\n      // 最後のAPI送信時間を更新\r\n      setLastApiRequestTime(new Date());\r\n    } catch (error) {\r\n      console.error(`${api.apiName} API呼び出し中にエラーが発生しました`, error);\r\n      // エラーの場合もステータスコードを更新\r\n      setStatusCodes((prevStatusCodes) => ({\r\n        ...prevStatusCodes,\r\n        [api.apiName]: 'Error',\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>最終更新時間: {lastApiRequestTime ? lastApiRequestTime.toLocaleTimeString() : 'まだ送信されていません'}</p>\r\n      {apiInfo.map((api) => (\r\n        <div key={api.apiName}>\r\n          <p>API名: {api.apiName}</p>\r\n          <p>ステータスコード: {statusCodes[api.apiName]}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatusDisplay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAElEC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,YAAY,GAAGC,OAAO,CAAC,kBAAkB,CAAC;IAChD,MAAMP,OAAO,GAAGM,YAAY,CAACN,OAAO;IAEpCC,UAAU,CAACD,OAAO,CAAC;;IAEnB;IACAA,OAAO,CAACQ,OAAO,CAAEC,GAAG,IAAK;MACvBC,eAAe,CAACD,GAAG,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA,MAAME,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCZ,OAAO,CAACQ,OAAO,CAAEC,GAAG,IAAK;QACvBC,eAAe,CAACD,GAAG,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,EAAE,OAAO,CAAC;;IAEX;IACA,OAAO,MAAMI,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,eAAe,GAAG,MAAOD,GAAG,IAAK;IACrC,IAAI;MACF;MACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,CAACO,WAAW,EAAE;QAC5CC,MAAM,EAAE;MACV,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAM,GAAGJ,QAAQ,CAACI,MAAM;;MAE9B;MACAf,cAAc,CAAEgB,eAAe,KAAM;QACnC,GAAGA,eAAe;QAClB,CAACV,GAAG,CAACW,OAAO,GAAGF;MACjB,CAAC,CAAC,CAAC;;MAEH;MACAb,qBAAqB,CAAC,IAAIgB,IAAI,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAE,GAAEb,GAAG,CAACW,OAAQ,sBAAqB,EAAEE,KAAK,CAAC;MAC1D;MACAnB,cAAc,CAAEgB,eAAe,KAAM;QACnC,GAAGA,eAAe;QAClB,CAACV,GAAG,CAACW,OAAO,GAAG;MACjB,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,oBACEvB,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MAAA2B,QAAA,GAAG,wCAAQ,EAACpB,kBAAkB,GAAGA,kBAAkB,CAACqB,kBAAkB,CAAC,CAAC,GAAG,aAAa;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5F7B,OAAO,CAAC8B,GAAG,CAAErB,GAAG,iBACfZ,OAAA;MAAA2B,QAAA,gBACE3B,OAAA;QAAA2B,QAAA,GAAG,aAAM,EAACf,GAAG,CAACW,OAAO;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BhC,OAAA;QAAA2B,QAAA,GAAG,oDAAU,EAACtB,WAAW,CAACO,GAAG,CAACW,OAAO,CAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFnCpB,GAAG,CAACW,OAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGhB,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC9B,EAAA,CAnEQD,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AAqEtB,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}