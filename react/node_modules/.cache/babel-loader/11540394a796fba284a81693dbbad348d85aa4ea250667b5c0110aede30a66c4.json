{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ygst_\\\\myFile\\\\ApiChecker\\\\src\\\\StatusDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StatusDisplay() {\n  _s();\n  const [apiInfo, setApiInfo] = useState([]);\n  const [statusCodes, setStatusCodes] = useState({});\n  useEffect(() => {\n    // エンドポイント情報を読み込む\n    const endpointData = require('./endpoints.json');\n    const apiInfo = endpointData.apiInfo;\n    setApiInfo(apiInfo);\n\n    // API情報ごとにリクエストを送信\n    apiInfo.forEach(api => {\n      fetchStatusCode(api);\n    });\n\n    // 1時間ごとにすべてのAPIに対してリクエストを再送信\n    const intervalId = setInterval(() => {\n      apiInfo.forEach(api => {\n        fetchStatusCode(api);\n      });\n    }, 3600000);\n\n    // コンポーネントがアンマウントされたときにクリア\n    return () => clearInterval(intervalId);\n  }, []);\n  const fetchStatusCode = async api => {\n    try {\n      // APIエンドポイントにGETリクエストを送信\n      const response = await fetch(api.apiEndpoint, {\n        method: 'GET'\n      });\n\n      // ステータスコードを取得\n      const status = response.status;\n\n      // ステータスコードを更新\n      setStatusCodes(prevStatusCodes => ({\n        ...prevStatusCodes,\n        [api.apiName]: status\n      }));\n    } catch (error) {\n      console.error(`${api.apiName} API呼び出し中にエラーが発生しました`, error);\n      // エラーの場合もステータスコードを更新\n      setStatusCodes(prevStatusCodes => ({\n        ...prevStatusCodes,\n        [api.apiName]: 'Error'\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: apiInfo.map(api => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"API\\u540D: \", api.apiName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u30B9\\u30C6\\u30FC\\u30BF\\u30B9\\u30B3\\u30FC\\u30C9: \", statusCodes[api.apiName]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, api.apiName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(StatusDisplay, \"/BumyK7JjZrzKqgphg62Dd66FZM=\");\n_c = StatusDisplay;\nexport default StatusDisplay;\nvar _c;\n$RefreshReg$(_c, \"StatusDisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","StatusDisplay","_s","apiInfo","setApiInfo","statusCodes","setStatusCodes","endpointData","require","forEach","api","fetchStatusCode","intervalId","setInterval","clearInterval","response","fetch","apiEndpoint","method","status","prevStatusCodes","apiName","error","console","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ygst_/myFile/ApiChecker/src/StatusDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction StatusDisplay() {\r\n  const [apiInfo, setApiInfo] = useState([]);\r\n  const [statusCodes, setStatusCodes] = useState({});\r\n\r\n  useEffect(() => {\r\n    // エンドポイント情報を読み込む\r\n    const endpointData = require('./endpoints.json');\r\n    const apiInfo = endpointData.apiInfo;\r\n\r\n    setApiInfo(apiInfo);\r\n\r\n    // API情報ごとにリクエストを送信\r\n    apiInfo.forEach((api) => {\r\n      fetchStatusCode(api);\r\n    });\r\n\r\n    // 1時間ごとにすべてのAPIに対してリクエストを再送信\r\n    const intervalId = setInterval(() => {\r\n      apiInfo.forEach((api) => {\r\n        fetchStatusCode(api);\r\n      });\r\n    }, 3600000);\r\n\r\n    // コンポーネントがアンマウントされたときにクリア\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const fetchStatusCode = async (api) => {\r\n    try {\r\n      // APIエンドポイントにGETリクエストを送信\r\n      const response = await fetch(api.apiEndpoint, {\r\n        method: 'GET',\r\n      });\r\n\r\n      // ステータスコードを取得\r\n      const status = response.status;\r\n\r\n      // ステータスコードを更新\r\n      setStatusCodes((prevStatusCodes) => ({\r\n        ...prevStatusCodes,\r\n        [api.apiName]: status,\r\n      }));\r\n    } catch (error) {\r\n      console.error(`${api.apiName} API呼び出し中にエラーが発生しました`, error);\r\n      // エラーの場合もステータスコードを更新\r\n      setStatusCodes((prevStatusCodes) => ({\r\n        ...prevStatusCodes,\r\n        [api.apiName]: 'Error',\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {apiInfo.map((api) => (\r\n        <div key={api.apiName}>\r\n          <p>API名: {api.apiName}</p>\r\n          <p>ステータスコード: {statusCodes[api.apiName]}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatusDisplay;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,YAAY,GAAGC,OAAO,CAAC,kBAAkB,CAAC;IAChD,MAAML,OAAO,GAAGI,YAAY,CAACJ,OAAO;IAEpCC,UAAU,CAACD,OAAO,CAAC;;IAEnB;IACAA,OAAO,CAACM,OAAO,CAAEC,GAAG,IAAK;MACvBC,eAAe,CAACD,GAAG,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA,MAAME,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCV,OAAO,CAACM,OAAO,CAAEC,GAAG,IAAK;QACvBC,eAAe,CAACD,GAAG,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,EAAE,OAAO,CAAC;;IAEX;IACA,OAAO,MAAMI,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,eAAe,GAAG,MAAOD,GAAG,IAAK;IACrC,IAAI;MACF;MACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,CAACO,WAAW,EAAE;QAC5CC,MAAM,EAAE;MACV,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAM,GAAGJ,QAAQ,CAACI,MAAM;;MAE9B;MACAb,cAAc,CAAEc,eAAe,KAAM;QACnC,GAAGA,eAAe;QAClB,CAACV,GAAG,CAACW,OAAO,GAAGF;MACjB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAE,GAAEZ,GAAG,CAACW,OAAQ,sBAAqB,EAAEC,KAAK,CAAC;MAC1D;MACAhB,cAAc,CAAEc,eAAe,KAAM;QACnC,GAAGA,eAAe;QAClB,CAACV,GAAG,CAACW,OAAO,GAAG;MACjB,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,oBACErB,OAAA;IAAAwB,QAAA,EACGrB,OAAO,CAACsB,GAAG,CAAEf,GAAG,iBACfV,OAAA;MAAAwB,QAAA,gBACExB,OAAA;QAAAwB,QAAA,GAAG,aAAM,EAACd,GAAG,CAACW,OAAO;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1B7B,OAAA;QAAAwB,QAAA,GAAG,oDAAU,EAACnB,WAAW,CAACK,GAAG,CAACW,OAAO,CAAC;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFnCnB,GAAG,CAACW,OAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGhB,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC3B,EAAA,CA9DQD,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AAgEtB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}